ARM COMPILER V2.53,  LCD                                                                   15/01/15  12:16:01  PAGE 1   


ARM COMPILER V2.53, COMPILATION OF MODULE LCD
OBJECT MODULE PLACED IN LCD.OBJ
COMPILER INVOKED BY: C:\Keil\ARM\BIN\CA.exe LCD.C THUMB BROWSE DEBUG TABS(4) 

stmt  level    source

    1          #include <LPC214X.H>
    2           #include "DELAY.h"
    3           #include"R_LCD.h"
    4           void main()
    5           {
    6   1       char cm[4]={0x0e,0x01,0x06,0x80};
    7   1       int i;
    8   1       char val[15]="RANJITH REMASAN";
    9   1      
   10   1       
   11   1       IODIR0|=0X00003C00;
   12   1       IODIR1|=0X01C00000;
   13   1       delay_ms(20);
   14   1       command4bit(0X03);
   15   1       delay_ms(10);
   16   1       command4bit(0X03); 
   17   1       delay_ms(10);
   18   1       command4bit(0X03); 
   19   1       delay_ms(10);
   20   1       command4bit(0X02);
   21   1       delay_ms(10);
   22   1       command(0X28);
   23   1        delay_ms(10);
   24   1       for(i=0;i<4;i++)
   25   1       {
   26   2       command(cm[i]);
   27   2       delay_ms(5);
   28   2       }
   29   1       while(1)
   30   1      
   31   1       {
   32   2      for(i=0;i<15;i++)
   33   2       {
   34   3       display(val[i]);
   35   3       delay_ms(50);
   36   3       }
   37   2      delay_ms(1000);
   38   2      command(0x01);
   39   2      delay_ms(10);
   40   2      }
   41   1      //display_string(1,0xc0," cat");
   42   1      // display_string(0,0x85," rat");
   43   1      // delay_ms(2000);
   44   1      // display_string(1,0xc0,"lcd worked");
   45   1       
   46   1      
   47   1       
   48   1      
   49   1      
   50   1       }
   51          
   52          
   53           
   54          
   55           
   56          
   57           
   58           
ARM COMPILER V2.53,  LCD                                                                   15/01/15  12:16:01  PAGE 2   

ASSEMBLY LISTING OF GENERATED OBJECT CODE



*** EXTERNALS:
 EXTERN NUMBER (__startup)



*** PUBLICS:
 PUBLIC         delay_us?T
 PUBLIC         delay_ms?T
 PUBLIC         command4bit?T
 PUBLIC         command?T
 PUBLIC         display?T
 PUBLIC         display_string?T
 PUBLIC         init_lcd?T
 PUBLIC         main



*** DATA SEGMENT '?CON?LCD':
 00000000          ?tpl?0001:
 00000000           BEGIN_INIT
 00000000  0E        DB          0xE
 00000001  01        DB          0x1
 00000002  06        DB          0x6
 00000003  80        DB          0x80
 00000004           END_INIT
 00000004          ?tpl?0002:
 00000004           BEGIN_INIT
 00000004  0E        DB          0xE
 00000005  01        DB          0x1
 00000006  06        DB          0x6
 00000007  80        DB          0x80
 00000008           END_INIT
 00000008          ?tpl?0003:
 00000008           BEGIN_INIT
 00000008            DB          'RANJITH REMASAN'
 00000017           END_INIT



*** CODE SEGMENT '?PR?delay_us?T?LCD':
    1: void delay_us(unsigned int dly)
 00000000  ---- Variable 'dly' assigned to Register 'R0' ----
    2: {
 00000000            ; SCOPE-START
   11: for(b=0;b<dly;b++)
 00000000  2100      MOV         R1,#0x0
 00000002  ---- Variable 'b' assigned to Register 'R1' ----
 00000002  E005      B           L_3  ; T=0x00000010
   14: for(a=0;a<10;a++)   //in this loop there are 6 instructions getting
 00000004          L_10:
 00000004  2200      MOV         R2,#0x0
 00000006  ---- Variable 'a' assigned to Register 'R2' ----
   17: }     // 10*6*(1/( 60*10^6) )
 00000006          L_6:
 00000006  3201      ADD         R2,#0x1
 00000008  1C13      MOV         R3,R2 ; a
 0000000A  2B0A      CMP         R3,#0xA ; a
 0000000C  DBFB      BLT         L_6  ; T=0x00000006
   20: }
 0000000E  3101      ADD         R1,#0x1
 00000010          L_3:
 00000010  1C0A      MOV         R2,R1 ; b
 00000012  1C03      MOV         R3,R0 ; dly
 00000014  429A      CMP         R2,R3 ; b
 00000016  D3F5      BCC         L_10  ; T=0x00000004
 00000018            ; SCOPE-END
   24: }
 00000018  4770      BX          R14
 0000001A          ENDP ; 'delay_us?T'

ARM COMPILER V2.53,  LCD                                                                   15/01/15  12:16:01  PAGE 3   


*** CODE SEGMENT '?PR?delay_ms?T?LCD':
   26: void delay_ms(unsigned int dly)
 00000000  B410      PUSH        {R4}
 00000002  ---- Variable 'dly' assigned to Register 'R0' ----
   27: {
 00000002            ; SCOPE-START
   30: for(b=0;b<dly;b++)
 00000002  2100      MOV         R1,#0x0
 00000004  ---- Variable 'b' assigned to Register 'R1' ----
 00000004  E00B      B           L_13  ; T=0x0000001E
   32: for(c=0;c<1000;c++ )
 00000006          L_20:
 00000006  2200      MOV         R2,#0x0
 00000008  ---- Variable 'c' assigned to Register 'R2' ----
   35: for(a=0;a<10;a++)   //in this loop there are 6 instructions getting
 00000008          L_25:
 00000008  2300      MOV         R3,#0x0
 0000000A  ---- Variable 'a' assigned to Register 'R3' ----
   38: }     // 10*6*(1/( 60*10^6) )
 0000000A          L_21:
 0000000A  3301      ADD         R3,#0x1
 0000000C  1C1C      MOV         R4,R3 ; a
 0000000E  2C0A      CMP         R4,#0xA ; a
 00000010  DBFB      BLT         L_21  ; T=0x0000000A
   41: }
 00000012  3201      ADD         R2,#0x1
 00000014  1C13      MOV         R3,R2 ; c
 00000016  4CFA      LDR         R4,=0x3E8
 00000018  42A3      CMP         R3,R4 ; c
 0000001A  DBF5      BLT         L_25  ; T=0x00000008
   42: }
 0000001C  3101      ADD         R1,#0x1
 0000001E          L_13:
 0000001E  1C0A      MOV         R2,R1 ; b
 00000020  1C03      MOV         R3,R0 ; dly
 00000022  429A      CMP         R2,R3 ; b
 00000024  D3EF      BCC         L_20  ; T=0x00000006
 00000026            ; SCOPE-END
 00000026  BC10      POP         {R4}
 00000028  4770      BX          R14
 0000002A          ENDP ; 'delay_ms?T'


*** CODE SEGMENT '?PR?command4bit?T?LCD':
    1:    void command4bit(char c)
 00000000  B500      PUSH        {LR}
 00000002  1C01      MOV         R1,R0 ; c
 00000004  ---- Variable 'c' assigned to Register 'R1' ----
    2:  {
 00000004            ; SCOPE-START
    4:  dd=c;
 00000004  1C08      MOV         R0,R1 ; c
 00000006  0602      LSL         R2,R0,#0x18 ; c
 00000008  0E12      LSR         R2,R2,#0x18
 0000000A  ---- Variable 'dd' assigned to Register 'R2' ----
    5:  dd=dd<<10;
 0000000A  0292      LSL         R2,R2,#0xA ; dd
    6:  IOCLR0=0X00003C00;//clearing p0.10 to p0.13
 0000000C  4800      LDR         R1,=0x3C00
 0000000E  4800      LDR         R0,=0xE002800C
 00000010  6001      STR         R1,[R0,#0x0]
    7:  IOCLR1=0X01000000;// command register selected
 00000012  4800      LDR         R1,=0x1000000
 00000014  4800      LDR         R0,=0xE002801C
 00000016  6001      STR         R1,[R0,#0x0]
    8:  IOCLR1=0X00800000;// rw=0,write mode selected
 00000018  4800      LDR         R1,=0x800000
 0000001A  4800      LDR         R0,=0xE002801C
ARM COMPILER V2.53,  LCD                                                                   15/01/15  12:16:01  PAGE 4   

 0000001C  6001      STR         R1,[R0,#0x0]
    9:  IOSET0=(dd&0x00003C00);
 0000001E  1C11      MOV         R1,R2 ; dd
 00000020  4800      LDR         R0,=0x3C00
 00000022  4001      AND         R1,R0
 00000024  4800      LDR         R0,=0xE0028004
 00000026  6001      STR         R1,[R0,#0x0]
   10:  IOSET1=0X00400000;// en=1,
 00000028  4800      LDR         R1,=0x400000
 0000002A  4800      LDR         R0,=0xE0028014
 0000002C  6001      STR         R1,[R0,#0x0]
   11:  delay_ms(1);
 0000002E  2001      MOV         R0,#0x1
 00000030  F7FF      BL          delay_ms?T  ; T=0x0001  (1)
 00000032  FFE6      BL          delay_ms?T  ; T=0x0001  (2)
   12:  IOCLR1=0X00400000;//en=0
 00000034  4800      LDR         R1,=0x400000
 00000036  4800      LDR         R0,=0xE002801C
 00000038  6001      STR         R1,[R0,#0x0]
 0000003A            ; SCOPE-END
   14: } void command(char c)
 0000003A  BC08      POP         {R3}
 0000003C  4718      BX          R3
 0000003E          ENDP ; 'command4bit?T'


*** CODE SEGMENT '?PR?command?T?LCD':
 00000000  B530      PUSH        {R4-R5,LR}
 00000002  1C05      MOV         R5,R0 ; c
 00000004  ---- Variable 'c' assigned to Register 'R5' ----
   15:  {
 00000004            ; SCOPE-START
   17:  dd=c;
 00000004  1C28      MOV         R0,R5 ; c
 00000006  0604      LSL         R4,R0,#0x18 ; c
 00000008  0E24      LSR         R4,R4,#0x18
 0000000A  ---- Variable 'dd' assigned to Register 'R4' ----
   18:  dd=dd<<6;
 0000000A  01A4      LSL         R4,R4,#0x6 ; dd
   19:  IOCLR0=0x00003C00;
 0000000C  4800      LDR         R1,=0x3C00
 0000000E  4800      LDR         R0,=0xE002800C
 00000010  6001      STR         R1,[R0,#0x0]
   20:  IOCLR1=0X01000000;
 00000012  4800      LDR         R1,=0x1000000
 00000014  4800      LDR         R0,=0xE002801C
 00000016  6001      STR         R1,[R0,#0x0]
   21:  IOCLR1=0X00800000;
 00000018  4800      LDR         R1,=0x800000
 0000001A  4800      LDR         R0,=0xE002801C
 0000001C  6001      STR         R1,[R0,#0x0]
   22:  IOSET0=(dd&0x00003C00); 
 0000001E  1C21      MOV         R1,R4 ; dd
 00000020  4800      LDR         R0,=0x3C00
 00000022  4001      AND         R1,R0
 00000024  4800      LDR         R0,=0xE0028004
 00000026  6001      STR         R1,[R0,#0x0]
   23:  IOSET1=0X00400000;
 00000028  4800      LDR         R1,=0x400000
 0000002A  4800      LDR         R0,=0xE0028014
 0000002C  6001      STR         R1,[R0,#0x0]
   24:  delay_ms(1);
 0000002E  2001      MOV         R0,#0x1
 00000030  F7FF      BL          delay_ms?T  ; T=0x0001  (1)
 00000032  FFE6      BL          delay_ms?T  ; T=0x0001  (2)
   25:  IOCLR1=0X00400000;
 00000034  4800      LDR         R1,=0x400000
 00000036  4800      LDR         R0,=0xE002801C
ARM COMPILER V2.53,  LCD                                                                   15/01/15  12:16:01  PAGE 5   

 00000038  6001      STR         R1,[R0,#0x0]
   26:  dd=c;
 0000003A  1C28      MOV         R0,R5 ; c
 0000003C  0604      LSL         R4,R0,#0x18 ; c
 0000003E  0E24      LSR         R4,R4,#0x18
   27:  dd=dd<<10;
 00000040  02A4      LSL         R4,R4,#0xA ; dd
   28:  IOCLR0=0x00003C00;
 00000042  4800      LDR         R2,=0x3C00
 00000044  4800      LDR         R0,=0xE002800C
 00000046  6002      STR         R2,[R0,#0x0]
   29:  IOCLR1=0X01000000;
 00000048  4800      LDR         R2,=0x1000000
 0000004A  4800      LDR         R0,=0xE002801C
 0000004C  6002      STR         R2,[R0,#0x0]
   30:  IOCLR1=0X00800000;
 0000004E  4800      LDR         R2,=0x800000
 00000050  4800      LDR         R0,=0xE002801C
 00000052  6002      STR         R2,[R0,#0x0]
   31:  IOSET0=(dd&0x00003C00); 
 00000054  1C22      MOV         R2,R4 ; dd
 00000056  4800      LDR         R0,=0x3C00
 00000058  4002      AND         R2,R0
 0000005A  4800      LDR         R0,=0xE0028004
 0000005C  6002      STR         R2,[R0,#0x0]
   32:  IOSET1=0X00400000;
 0000005E  4800      LDR         R0,=0xE0028014
 00000060  6001      STR         R1,[R0,#0x0]
   33:  delay_ms(1);
 00000062  2001      MOV         R0,#0x1
 00000064  F7FF      BL          delay_ms?T  ; T=0x0001  (1)
 00000066  FFCC      BL          delay_ms?T  ; T=0x0001  (2)
   34:  IOCLR1=0X00400000;
 00000068  4800      LDR         R1,=0x400000
 0000006A  4800      LDR         R0,=0xE002801C
 0000006C  6001      STR         R1,[R0,#0x0]
 0000006E            ; SCOPE-END
   35:  }
 0000006E  BC30      POP         {R4-R5}
 00000070  BC08      POP         {R3}
 00000072  4718      BX          R3
 00000074          ENDP ; 'command?T'


*** CODE SEGMENT '?PR?display?T?LCD':
   37:  void display(char c)
 00000000  B530      PUSH        {R4-R5,LR}
 00000002  1C05      MOV         R5,R0 ; c
 00000004  ---- Variable 'c' assigned to Register 'R5' ----
   38:  {
 00000004            ; SCOPE-START
   40:  dd=c;
 00000004  1C28      MOV         R0,R5 ; c
 00000006  0604      LSL         R4,R0,#0x18 ; c
 00000008  0E24      LSR         R4,R4,#0x18
 0000000A  ---- Variable 'dd' assigned to Register 'R4' ----
   41:  dd=dd<<6;
 0000000A  01A4      LSL         R4,R4,#0x6 ; dd
   42:  IOCLR0=0x00003C00;
 0000000C  4800      LDR         R1,=0x3C00
 0000000E  4800      LDR         R0,=0xE002800C
 00000010  6001      STR         R1,[R0,#0x0]
   43:  IOSET1=0X01000000;// data register selected
 00000012  4800      LDR         R1,=0x1000000
 00000014  4800      LDR         R0,=0xE0028014
 00000016  6001      STR         R1,[R0,#0x0]
   44:  IOCLR1=0X00800000;
 00000018  4800      LDR         R1,=0x800000
ARM COMPILER V2.53,  LCD                                                                   15/01/15  12:16:01  PAGE 6   

 0000001A  4800      LDR         R0,=0xE002801C
 0000001C  6001      STR         R1,[R0,#0x0]
   45:  IOSET0=(dd&0x00003C00); 
 0000001E  1C21      MOV         R1,R4 ; dd
 00000020  4800      LDR         R0,=0x3C00
 00000022  4001      AND         R1,R0
 00000024  4800      LDR         R0,=0xE0028004
 00000026  6001      STR         R1,[R0,#0x0]
   46:  IOSET1=0X00400000;
 00000028  4800      LDR         R1,=0x400000
 0000002A  4800      LDR         R0,=0xE0028014
 0000002C  6001      STR         R1,[R0,#0x0]
   47:  delay_ms(1);
 0000002E  2001      MOV         R0,#0x1
 00000030  F7FF      BL          delay_ms?T  ; T=0x0001  (1)
 00000032  FFE6      BL          delay_ms?T  ; T=0x0001  (2)
   48:  IOCLR1=0X00400000;
 00000034  4800      LDR         R1,=0x400000
 00000036  4800      LDR         R0,=0xE002801C
 00000038  6001      STR         R1,[R0,#0x0]
   49:  dd=c;
 0000003A  1C28      MOV         R0,R5 ; c
 0000003C  0604      LSL         R4,R0,#0x18 ; c
 0000003E  0E24      LSR         R4,R4,#0x18
   50:  dd=dd<<10;
 00000040  02A4      LSL         R4,R4,#0xA ; dd
   51:  IOCLR0=0x00003C00;
 00000042  4800      LDR         R2,=0x3C00
 00000044  4800      LDR         R0,=0xE002800C
 00000046  6002      STR         R2,[R0,#0x0]
   52:  IOSET1=0X01000000;// data register selected
 00000048  4800      LDR         R2,=0x1000000
 0000004A  4800      LDR         R0,=0xE0028014
 0000004C  6002      STR         R2,[R0,#0x0]
   53:  IOCLR1=0X00800000;
 0000004E  4800      LDR         R2,=0x800000
 00000050  4800      LDR         R0,=0xE002801C
 00000052  6002      STR         R2,[R0,#0x0]
   54:  IOSET0=(dd&0x00003C00); 
 00000054  1C22      MOV         R2,R4 ; dd
 00000056  4800      LDR         R0,=0x3C00
 00000058  4002      AND         R2,R0
 0000005A  4800      LDR         R0,=0xE0028004
 0000005C  6002      STR         R2,[R0,#0x0]
   55:  IOSET1=0X00400000;
 0000005E  4800      LDR         R0,=0xE0028014
 00000060  6001      STR         R1,[R0,#0x0]
   56:  delay_ms(1);
 00000062  2001      MOV         R0,#0x1
 00000064  F7FF      BL          delay_ms?T  ; T=0x0001  (1)
 00000066  FFCC      BL          delay_ms?T  ; T=0x0001  (2)
   57:  IOCLR1=0X00400000;
 00000068  4800      LDR         R1,=0x400000
 0000006A  4800      LDR         R0,=0xE002801C
 0000006C  6001      STR         R1,[R0,#0x0]
 0000006E            ; SCOPE-END
   58:  }
 0000006E  BC30      POP         {R4-R5}
 00000070  BC08      POP         {R3}
 00000072  4718      BX          R3
 00000074          ENDP ; 'display?T'


*** CODE SEGMENT '?PR?display_string?T?LCD':
   59:  void display_string(char clr,char pos, char *h)
 00000000  B530      PUSH        {R4-R5,LR}
 00000002  1C15      MOV         R5,R2 ; h
 00000004  ---- Variable 'h' assigned to Register 'R5' ----
ARM COMPILER V2.53,  LCD                                                                   15/01/15  12:16:01  PAGE 7   

 00000004  1C0C      MOV         R4,R1 ; pos
 00000006  ---- Variable 'pos' assigned to Register 'R4' ----
 00000006  1C01      MOV         R1,R0 ; clr
 00000008  ---- Variable 'clr' assigned to Register 'R1' ----
   60:  {
 00000008            ; SCOPE-START
   62:  if(clr==1)
 00000008  1C08      MOV         R0,R1 ; clr
 0000000A  0600      LSL         R0,R0,#0x18 ; clr
 0000000C  0E00      LSR         R0,R0,#0x18
 0000000E  2801      CMP         R0,#0x1
 00000010  D105      BNE         L_26  ; T=0x0000001E
   64:  command(0x01);
 00000012  2001      MOV         R0,#0x1
 00000014  F7FF      BL          command?T  ; T=0x0001  (1)
 00000016  FFF4      BL          command?T  ; T=0x0001  (2)
   65:  delay_ms(5);
 00000018  2005      MOV         R0,#0x5
 0000001A  F7FF      BL          delay_ms?T  ; T=0x0001  (1)
 0000001C  FFF1      BL          delay_ms?T  ; T=0x0001  (2)
   66:  }
 0000001E          L_26:
   67:  command(pos);
 0000001E  1C20      MOV         R0,R4 ; pos
 00000020  0600      LSL         R0,R0,#0x18 ; pos
 00000022  0E00      LSR         R0,R0,#0x18
 00000024  F7FF      BL          command?T  ; T=0x0001  (1)
 00000026  FFEC      BL          command?T  ; T=0x0001  (2)
   68:  delay_ms(5);
 00000028  2005      MOV         R0,#0x5
 0000002A  F7FF      BL          delay_ms?T  ; T=0x0001  (1)
 0000002C  FFE9      BL          delay_ms?T  ; T=0x0001  (2)
   69:  for(n=0;h[n]!='\0';n++)
 0000002E  2400      MOV         R4,#0x0
 00000030  ---- Variable 'n' assigned to Register 'R4' ----
 00000030  E005      B           L_29  ; T=0x0000003E
 00000032          L_30:
   71:  display(h[n]);
 00000032  1C21      MOV         R1,R4 ; n
 00000034  1C28      MOV         R0,R5 ; h
 00000036  5C40      LDRB        R0,[R0,R1]
 00000038  F7FF      BL          display?T  ; T=0x0001  (1)
 0000003A  FFE2      BL          display?T  ; T=0x0001  (2)
   72:  }
 0000003C  3401      ADD         R4,#0x1
 0000003E          L_29:
 0000003E  1C21      MOV         R1,R4 ; n
 00000040  1C28      MOV         R0,R5 ; h
 00000042  5C40      LDRB        R0,[R0,R1]
 00000044  2800      CMP         R0,#0x0
 00000046  D1F4      BNE         L_30  ; T=0x00000032
 00000048            ; SCOPE-END
   75:  }
 00000048  BC30      POP         {R4-R5}
 0000004A  BC08      POP         {R3}
 0000004C  4718      BX          R3
 0000004E          ENDP ; 'display_string?T'


*** CODE SEGMENT '?PR?init_lcd?T?LCD':
   77:  void init_lcd(void)
 00000000  B510      PUSH        {R4,LR}
 00000002  B081      SUB         R13,#0x4
   78:  {
 00000004            ; SCOPE-START
   79:  char cm[4]={0x0e,0x01,0x06,0x80};
 00000004  4800      LDR         R1,=?tpl?0001 ; ?tpl?0001
 00000006  A800      ADD         R0,R13,#0x0
ARM COMPILER V2.53,  LCD                                                                   15/01/15  12:16:01  PAGE 8   

 00000008  2204      MOV         R2,#0x4
 0000000A          L_52:
 0000000A  780B      LDRB        R3,[R1,#0x0]
 0000000C  7003      STRB        R3,[R0,#0x0]
 0000000E  1C49      ADD         R1,R1,#0x1
 00000010  1C40      ADD         R0,R0,#0x1
 00000012  1E52      SUB         R2,R2,#0x1
 00000014  D1F9      BNE         L_52  ; T=0x0000000A
   81:  IODIR0|=0X00003C00;
 00000016  4800      LDR         R2,=0x3C00
 00000018  4800      LDR         R0,=0xE0028008
 0000001A  6801      LDR         R1,[R0,#0x0]
 0000001C  4311      ORR         R1,R2
 0000001E  6001      STR         R1,[R0,#0x0]
   82:  IODIR1|=0X01C00000;
 00000020  4800      LDR         R2,=0x1C00000
 00000022  4800      LDR         R0,=0xE0028018
 00000024  6801      LDR         R1,[R0,#0x0]
 00000026  4311      ORR         R1,R2
 00000028  6001      STR         R1,[R0,#0x0]
   83:  delay_ms(20);
 0000002A  2014      MOV         R0,#0x14
 0000002C  F7FF      BL          delay_ms?T  ; T=0x0001  (1)
 0000002E  FFE8      BL          delay_ms?T  ; T=0x0001  (2)
   84:  command4bit(0X03);
 00000030  2003      MOV         R0,#0x3
 00000032  F7FF      BL          command4bit?T  ; T=0x0001  (1)
 00000034  FFE5      BL          command4bit?T  ; T=0x0001  (2)
   85:  delay_ms(10);
 00000036  200A      MOV         R0,#0xA
 00000038  F7FF      BL          delay_ms?T  ; T=0x0001  (1)
 0000003A  FFE2      BL          delay_ms?T  ; T=0x0001  (2)
   86:  command4bit(0X03); 
 0000003C  2003      MOV         R0,#0x3
 0000003E  F7FF      BL          command4bit?T  ; T=0x0001  (1)
 00000040  FFDF      BL          command4bit?T  ; T=0x0001  (2)
   87:  delay_ms(10);
 00000042  200A      MOV         R0,#0xA
 00000044  F7FF      BL          delay_ms?T  ; T=0x0001  (1)
 00000046  FFDC      BL          delay_ms?T  ; T=0x0001  (2)
   88:  command4bit(0X03); 
 00000048  2003      MOV         R0,#0x3
 0000004A  F7FF      BL          command4bit?T  ; T=0x0001  (1)
 0000004C  FFD9      BL          command4bit?T  ; T=0x0001  (2)
   89:  delay_ms(10);
 0000004E  200A      MOV         R0,#0xA
 00000050  F7FF      BL          delay_ms?T  ; T=0x0001  (1)
 00000052  FFD6      BL          delay_ms?T  ; T=0x0001  (2)
   90:  command4bit(0X02);
 00000054  2002      MOV         R0,#0x2
 00000056  F7FF      BL          command4bit?T  ; T=0x0001  (1)
 00000058  FFD3      BL          command4bit?T  ; T=0x0001  (2)
   91:  delay_ms(10);
 0000005A  200A      MOV         R0,#0xA
 0000005C  F7FF      BL          delay_ms?T  ; T=0x0001  (1)
 0000005E  FFD0      BL          delay_ms?T  ; T=0x0001  (2)
   92:  command(0X28);
 00000060  2028      MOV         R0,#0x28
 00000062  F7FF      BL          command?T  ; T=0x0001  (1)
 00000064  FFCD      BL          command?T  ; T=0x0001  (2)
   93:   delay_ms(10);
 00000066  200A      MOV         R0,#0xA
 00000068  F7FF      BL          delay_ms?T  ; T=0x0001  (1)
 0000006A  FFCA      BL          delay_ms?T  ; T=0x0001  (2)
   94:  for(i=0;i<4;i++)
 0000006C  2400      MOV         R4,#0x0
ARM COMPILER V2.53,  LCD                                                                   15/01/15  12:16:01  PAGE 9   

 0000006E  ---- Variable 'i' assigned to Register 'R4' ----
 0000006E          L_35:
   96:  command(cm[i]);
 0000006E  1C21      MOV         R1,R4 ; i
 00000070  A800      ADD         R0,R13,#0x0
 00000072  5C40      LDRB        R0,[R0,R1]
 00000074  F7FF      BL          command?T  ; T=0x0001  (1)
 00000076  FFC4      BL          command?T  ; T=0x0001  (2)
   97:  delay_ms(5);
 00000078  2005      MOV         R0,#0x5
 0000007A  F7FF      BL          delay_ms?T  ; T=0x0001  (1)
 0000007C  FFC1      BL          delay_ms?T  ; T=0x0001  (2)
   98:  }
 0000007E  3401      ADD         R4,#0x1
 00000080  1C20      MOV         R0,R4 ; i
 00000082  2804      CMP         R0,#0x4 ; i
 00000084  DBF3      BLT         L_35  ; T=0x0000006E
 00000086            ; SCOPE-END
 00000086  B001      ADD         R13,#0x4
 00000088  BC10      POP         {R4}
 0000008A  BC08      POP         {R3}
 0000008C  4718      BX          R3
 0000008E          ENDP ; 'init_lcd?T'


*** CODE SEGMENT '?PR?main?LCD':
    4:  void main()
 00000000  B500      PUSH        {LR}
 00000002  B085      SUB         R13,#0x14
    5:  {
 00000004            ; SCOPE-START
    6:  char cm[4]={0x0e,0x01,0x06,0x80};
 00000004  4800      LDR         R1,=?tpl?0002 ; ?tpl?0002
 00000006  A800      ADD         R0,R13,#0x0
 00000008  2204      MOV         R2,#0x4
 0000000A          L_55:
 0000000A  780B      LDRB        R3,[R1,#0x0]
 0000000C  7003      STRB        R3,[R0,#0x0]
 0000000E  1C49      ADD         R1,R1,#0x1
 00000010  1C40      ADD         R0,R0,#0x1
 00000012  1E52      SUB         R2,R2,#0x1
 00000014  D1F9      BNE         L_55  ; T=0x0000000A
    8:  char val[15]="RANJITH REMASAN";
 00000016  4800      LDR         R1,=?tpl?0003 ; ?tpl?0003
 00000018  A801      ADD         R0,R13,#0x4
 0000001A  220F      MOV         R2,#0xF
 0000001C          L_56:
 0000001C  780B      LDRB        R3,[R1,#0x0]
 0000001E  7003      STRB        R3,[R0,#0x0]
 00000020  1C49      ADD         R1,R1,#0x1
 00000022  1C40      ADD         R0,R0,#0x1
 00000024  1E52      SUB         R2,R2,#0x1
 00000026  D1F9      BNE         L_56  ; T=0x0000001C
   11:  IODIR0|=0X00003C00;
 00000028  4800      LDR         R2,=0x3C00
 0000002A  4800      LDR         R0,=0xE0028008
 0000002C  6801      LDR         R1,[R0,#0x0]
 0000002E  4311      ORR         R1,R2
 00000030  6001      STR         R1,[R0,#0x0]
   12:  IODIR1|=0X01C00000;
 00000032  4800      LDR         R2,=0x1C00000
 00000034  4800      LDR         R0,=0xE0028018
 00000036  6801      LDR         R1,[R0,#0x0]
 00000038  4311      ORR         R1,R2
 0000003A  6001      STR         R1,[R0,#0x0]
   13:  delay_ms(20);
 0000003C  2014      MOV         R0,#0x14
 0000003E  F7FF      BL          delay_ms?T  ; T=0x0001  (1)
ARM COMPILER V2.53,  LCD                                                                   15/01/15  12:16:01  PAGE 10  

 00000040  FFDF      BL          delay_ms?T  ; T=0x0001  (2)
   14:  command4bit(0X03);
 00000042  2003      MOV         R0,#0x3
 00000044  F7FF      BL          command4bit?T  ; T=0x0001  (1)
 00000046  FFDC      BL          command4bit?T  ; T=0x0001  (2)
   15:  delay_ms(10);
 00000048  200A      MOV         R0,#0xA
 0000004A  F7FF      BL          delay_ms?T  ; T=0x0001  (1)
 0000004C  FFD9      BL          delay_ms?T  ; T=0x0001  (2)
   16:  command4bit(0X03); 
 0000004E  2003      MOV         R0,#0x3
 00000050  F7FF      BL          command4bit?T  ; T=0x0001  (1)
 00000052  FFD6      BL          command4bit?T  ; T=0x0001  (2)
   17:  delay_ms(10);
 00000054  200A      MOV         R0,#0xA
 00000056  F7FF      BL          delay_ms?T  ; T=0x0001  (1)
 00000058  FFD3      BL          delay_ms?T  ; T=0x0001  (2)
   18:  command4bit(0X03); 
 0000005A  2003      MOV         R0,#0x3
 0000005C  F7FF      BL          command4bit?T  ; T=0x0001  (1)
 0000005E  FFD0      BL          command4bit?T  ; T=0x0001  (2)
   19:  delay_ms(10);
 00000060  200A      MOV         R0,#0xA
 00000062  F7FF      BL          delay_ms?T  ; T=0x0001  (1)
 00000064  FFCD      BL          delay_ms?T  ; T=0x0001  (2)
   20:  command4bit(0X02);
 00000066  2002      MOV         R0,#0x2
 00000068  F7FF      BL          command4bit?T  ; T=0x0001  (1)
 0000006A  FFCA      BL          command4bit?T  ; T=0x0001  (2)
   21:  delay_ms(10);
 0000006C  200A      MOV         R0,#0xA
 0000006E  F7FF      BL          delay_ms?T  ; T=0x0001  (1)
 00000070  FFC7      BL          delay_ms?T  ; T=0x0001  (2)
   22:  command(0X28);
 00000072  2028      MOV         R0,#0x28
 00000074  F7FF      BL          command?T  ; T=0x0001  (1)
 00000076  FFC4      BL          command?T  ; T=0x0001  (2)
   23:   delay_ms(10);
 00000078  200A      MOV         R0,#0xA
 0000007A  F7FF      BL          delay_ms?T  ; T=0x0001  (1)
 0000007C  FFC1      BL          delay_ms?T  ; T=0x0001  (2)
   24:  for(i=0;i<4;i++)
 0000007E  2400      MOV         R4,#0x0
 00000080  ---- Variable 'i' assigned to Register 'R4' ----
 00000080          L_40:
   26:  command(cm[i]);
 00000080  1C21      MOV         R1,R4 ; i
 00000082  A800      ADD         R0,R13,#0x0
 00000084  5C40      LDRB        R0,[R0,R1]
 00000086  F7FF      BL          command?T  ; T=0x0001  (1)
 00000088  FFBB      BL          command?T  ; T=0x0001  (2)
   27:  delay_ms(5);
 0000008A  2005      MOV         R0,#0x5
 0000008C  F7FF      BL          delay_ms?T  ; T=0x0001  (1)
 0000008E  FFB8      BL          delay_ms?T  ; T=0x0001  (2)
   28:  }
 00000090  3401      ADD         R4,#0x1
 00000092  1C20      MOV         R0,R4 ; i
 00000094  2804      CMP         R0,#0x4 ; i
 00000096  DBF3      BLT         L_40  ; T=0x00000080
   32: for(i=0;i<15;i++)
 00000098          L_50:
 00000098  2400      MOV         R4,#0x0
 0000009A          L_49:
   34:  display(val[i]);
 0000009A  1C21      MOV         R1,R4 ; i
ARM COMPILER V2.53,  LCD                                                                   15/01/15  12:16:01  PAGE 11  

 0000009C  A801      ADD         R0,R13,#0x4
 0000009E  5C40      LDRB        R0,[R0,R1]
 000000A0  F7FF      BL          display?T  ; T=0x0001  (1)
 000000A2  FFAE      BL          display?T  ; T=0x0001  (2)
   35:  delay_ms(50);
 000000A4  2032      MOV         R0,#0x32
 000000A6  F7FF      BL          delay_ms?T  ; T=0x0001  (1)
 000000A8  FFAB      BL          delay_ms?T  ; T=0x0001  (2)
   36:  }
 000000AA  3401      ADD         R4,#0x1
 000000AC  1C20      MOV         R0,R4 ; i
 000000AE  280F      CMP         R0,#0xF ; i
 000000B0  DBF3      BLT         L_49  ; T=0x0000009A
   37: delay_ms(1000);
 000000B2  48FA      LDR         R0,=0x3E8
 000000B4  F7FF      BL          delay_ms?T  ; T=0x0001  (1)
 000000B6  FFA4      BL          delay_ms?T  ; T=0x0001  (2)
   38: command(0x01);
 000000B8  2001      MOV         R0,#0x1
 000000BA  F7FF      BL          command?T  ; T=0x0001  (1)
 000000BC  FFA1      BL          command?T  ; T=0x0001  (2)
   39: delay_ms(10);
 000000BE  200A      MOV         R0,#0xA
 000000C0  F7FF      BL          delay_ms?T  ; T=0x0001  (1)
 000000C2  FF9E      BL          delay_ms?T  ; T=0x0001  (2)
   40: }
 000000C4  E7E8      B           L_50  ; T=0x00000098
 000000C6            ; SCOPE-END
   50:  }
 000000C6  B005      ADD         R13,#0x14
 000000C8  BC08      POP         {R3}
 000000CA  4718      BX          R3
 000000CC          ENDP ; 'main'



Module Information          Static
----------------------------------
  code size            =    ------
  data size            =    ------
  const size           =        23
End of Module Information.


ARM COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
